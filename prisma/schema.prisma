// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id              String    @id @default(uuid())
    email           String    @unique
    username        String    @unique
    password        String
    firstName       String?
    lastName        String?
    isActive        Boolean   @default(true)
    isEmailVerified Boolean   @default(false)
    emailVerifiedAt DateTime?
    refreshToken    String?
    lastLoginAt     DateTime?
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
    deletedAt       DateTime?

    roles               UserRole[]
    resourcePermissions ResourcePermission[]
    auditLogs           AuditLog[]

    @@index([email])
    @@index([username])
    @@map("users")
}

model Role {
    id          String    @id @default(uuid())
    name        String    @unique
    description String?
    parentId    String?
    isActive    Boolean   @default(true)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    deletedAt   DateTime?

    parent      Role?            @relation("RoleHierarchy", fields: [parentId], references: [id])
    children    Role[]           @relation("RoleHierarchy")
    users       UserRole[]
    permissions RolePermission[]

    @@index([name])
    @@index([parentId])
    @@map("roles")
}

model Permission {
    id          String    @id @default(uuid())
    name        String    @unique
    resource    String
    action      String
    description String?
    isActive    Boolean   @default(true)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    deletedAt   DateTime?

    roles    RolePermission[]
    policies PolicyPermission[]

    @@index([resource])
    @@index([action])
    @@map("permissions")
}

model UserRole {
    id        String   @id @default(uuid())
    userId    String
    roleId    String
    createdAt DateTime @default(now())

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

    @@unique([userId, roleId])
    @@index([userId])
    @@index([roleId])
    @@map("user_roles")
}

model RolePermission {
    id           String   @id @default(uuid())
    roleId       String
    permissionId String
    createdAt    DateTime @default(now())

    role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
    permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

    @@unique([roleId, permissionId])
    @@index([roleId])
    @@index([permissionId])
    @@map("role_permissions")
}

model Policy {
    id          String       @id @default(uuid())
    name        String       @unique
    description String?
    effect      PolicyEffect @default(ALLOW)
    conditions  Json // JSON object for complex conditions
    isActive    Boolean      @default(true)
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    deletedAt   DateTime?

    permissions PolicyPermission[]

    @@index([name])
    @@map("policies")
}

model PolicyPermission {
    id           String   @id @default(uuid())
    policyId     String
    permissionId String
    createdAt    DateTime @default(now())

    policy     Policy     @relation(fields: [policyId], references: [id], onDelete: Cascade)
    permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

    @@unique([policyId, permissionId])
    @@index([policyId])
    @@index([permissionId])
    @@map("policy_permissions")
}

model ResourcePermission {
    id           String    @id @default(uuid())
    userId       String
    resourceType String
    resourceId   String
    actions      String[] // Array of allowed actions: ["read", "write", "delete"]
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
    deletedAt    DateTime?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, resourceType, resourceId])
    @@index([userId])
    @@index([resourceType, resourceId])
    @@map("resource_permissions")
}

model AuditLog {
    id         String   @id @default(uuid())
    userId     String?
    action     String
    resource   String
    resourceId String?
    details    Json?
    ipAddress  String?
    userAgent  String?
    createdAt  DateTime @default(now())

    user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

    @@index([userId])
    @@index([action])
    @@index([resource])
    @@index([createdAt])
    @@map("audit_logs")
}

enum PolicyEffect {
    ALLOW
    DENY
}
